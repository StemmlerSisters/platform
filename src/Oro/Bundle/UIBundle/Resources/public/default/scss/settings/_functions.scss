/* @theme: default; */

@use 'sass:math';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:string';
@use 'sass:map';

/** @return the value from a $color-palette map associated with a given key;
    Use: color: get-color('primary', 'main') => color: #000;
*/
@function get-color($palette, $keys...) {
    $color-key: map.get($color-palette, $palette, $keys...);

    @if not $color-key or meta.type-of($color-key) == 'map' or meta.type-of($color-key) == 'list' {
        @warn 'Color not found';

        @return null;
    }

    @return $color-key;
}

/** @return the value from a $color-palette map associated with a given key and with css var;
    Use: color: get-var-color('primary', 'base') => color: var(--primary-base, #000);
*/

@function get-var-color($palette, $keys...) {
    $color-key: get-color($palette, $keys...);

    @if not $color-key {
        @return null;
    }

    @return var(get-var-key($palette, $keys...), $color-key);
}

/** @return the css-property key based on list of arguments;
    Use: get-var-key('btn', 'primary', 'hover') => --btn-primary-hover;
*/
@function get-var-key($list...) {
    @if not $list or meta.type-of($list) != 'arglist' or list.length($list) == 0 {
        @return null;
    }

    $var-key: '-';

    @each $key in $list {
        @if $key {
            $var-key: #{$var-key}-#{$key};
        }
    }

    @return $var-key;
}

/** @return the value in a $theme-fonts map associated with a given key;
    Use: font-family: get-font-name('main') => font-family: 'Poppins';
*/

@function get-font-name($key) {
    $font: map.get($theme-fonts, $key, 'family');

    @if not $font {
        @warn 'Font not found:' $key;
    }

    @return $font;
}

/** @return the value in a $font-weights map associated with a given key;
    Use: font-weight: font-weight('bold') => font-weight: 700;
*/

@function font-weight($key) {
    $font-weight-key: map.get($font-weights, $key);

    @if ($font-weight-key) {
        @return $font-weight-key;
    } @else {
        @warn 'Font weight value not found:' $key;
    }
}

/** Calculates the spacing sizes based on specified multipliers and a base value.
    @param {String} $name - The name of the spacing size (e.g., xs, md, lg).
    @return {Number|null} The calculated spacing size in pixels, based on the provided multipliers
                          and the base spacing value. Returns null if multiplier is not found.
*/
@function spacing($name) {
    $multiplier: map.get($spacing-multipliers, $name);

    @if not $multiplier {
        @warn "No multiplier found for '#{$name}'.";

        @return null;
    }

    @return $base-spacing * $multiplier;
}

/** @return: the value in a map associated with a given key
    Use: z-index: z('base');
*/

@function z($layer: 'base') {
    $layers: (
        'base': 1,
        'dropdown': 50,
        'fixed': 100,
        'popup': 150,
        'hidden': -1
    ) !default;

    $z-index: map.get($layers, $layer);

    @return $z-index;
}

/** Remove the unit of a length
    @return number
    Use: $value: strip-units(10px); -> 10
*/

@function strip-units($value) {
    @return math.div($value, $value * 0 + 1);
}

/** In SASS we can only once set a value to variable with flag !default, all others values will be ignored.
    The variable must be declared.
    @return new value with flag !default;
    Use: $component-var: reset-var($component-var, 10);
*/

@function update-default($var, $value: null) {
    $var: null;
    $var: $value !default;

    @return $var;
}

/** Extended default map-merge
    Merge two maps together into new map, w/o null keys
*/

@function map-merge-wo-null($map1, $map2) {
    $result: map.merge($map1, $map2);

    @each $key in map.keys($result) {
        @if not map.get($result, $key) {
            $result: map.remove($result, $key);
        }
    }

    @return $result;
}

/** Merge breakpoints
    $old-breakpoints: (
        'desktop': '(min-width: 1100px)',
        'tablet': '(max-width: 1099px )'
    );
    $new-breakpoints: (
        'desktop': '(min-width: 1200px)',
        'tablet': null,
        'mobile': '(max-width: 640px)'
    );
    @return the value with a merged breakpoints;
    $breakpoints: (
        'desktop''(min-width: 1200px)',
        'mobile': '(max-width: 640px)'
    );
    Use: merge-breakpoints($old-breakpoints, $new-breakpoints);
*/

@function merge-breakpoints($breakpoints1, $news-breakpoint2) {
    @return map-merge-wo-null($breakpoints1, $news-breakpoint2);
}

/** Get base breakpoint list
    @return the list of base breakpoints;
*/
@function get-breakpoints-list() {
    $breakpoints-list: ();

    @each $name, $value in $breakpoints {
        @if string.index($name, 'tablet') == 1 or string.index($name, 'mobile') == 1 {
            $breakpoints-list: list.append($breakpoints-list, $name);
        }
    }

    @return $breakpoints-list;
}

/** @return modified selector
    Use: modify-selector($selector: 'a', $part-before: '~ ') => '~ a';
*/
@function modify-selector($selector, $part-before: null, $part-after: null) {
    @if ($part-before) {
        $selector: $part-before + $selector;
    }

    @if ($part-after) {
        $selector: $part-after + $selector;
    }

    @return $selector;
}

/** @return modified list of selectors
    Use: modify-selector(selectors: 'a , button', $part-before: '~ ') => '~ a, ~ button';
*/
@function modify-selectors($selectors, $part-before: null, $part-after: null) {
    @if (meta.type-of($selectors) != 'list') {
        @warn '$selectors: #{$selectors} must be a list type';
    }

    $modified-selectors: ();
    $list-separator: list.separator($selectors);

    @each $selector in $selectors {
        $modified-selectors: list.append(
            $modified-selectors,
            modify-selector($selector, $part-before, $part-after),
            $separator: $list-separator
        );
    }

    @return $modified-selectors;
}

/** @return the list of CSS selectors for HTML elements that can receive focus
    Use: font-get-focusable-selector() => 'a[href]:not([tabindex="-1"]), input:not([disabled]):not([tabindex="-1"])';
*/
@function get-focusable-selectors($whole-list: false, $part-before: null, $part-after: null) {
    $base: (
        'a[href]',
        'input:not([disabled])',
        'select:not([disabled])',
        'textarea:not([disabled])',
        'button:not([disabled])',
        '.dropdown-menu',
        '[tabindex]'
    );
    $more: (
        'area[href]',
        'iframe',
        '[contentEditable=true]'
    );

    @if ($whole-list) {
        @return modify-selectors($base, $part-before, $part-after) + modify-selectors($more, $part-before, $part-after);
    } @else {
        @return modify-selectors($base, $part-before, $part-after);
    }
}
